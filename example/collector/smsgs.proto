/******************************************************************************

 @file smsgs.proto

 @brief TIMAC 2.0 - Protobuf definition for items in the smsgs.h (sensor) file


 Group: WCS LPC
 $Target Devices: Linux: AM335x, Embedded Devices: CC1310, CC1350$

 ******************************************************************************
 $License: BSD3 2016 $
  
   Copyright (c) 2015, Texas Instruments Incorporated
   All rights reserved.
  
   Redistribution and use in source and binary forms, with or without
   modification, are permitted provided that the following conditions
   are met:
  
   *  Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
  
   *  Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
  
   *  Neither the name of Texas Instruments Incorporated nor the names of
      its contributors may be used to endorse or promote products derived
      from this software without specific prior written permission.
  
   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
   THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
   PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
   EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
   PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
   OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
   WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
   OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
   EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 ******************************************************************************
 $Release Name: TI-15.4Stack Linux x64 SDK ENG$
 $Release Date: Mar 08, 2017 (2.01.00.10)$
 *****************************************************************************/

syntax = "proto2";

/*!
  Message IDs for Sensor data messages.  When sent over-the-air in a message,
  this field is one byte.
*/
enum Smsgs_cmdIds
{
    /*! Configuration message, sent from the collector to the sensor */
    Smsgs_cmdIds_configReq = 1;
    /*! Configuration Response message, sent from the sensor to the collector */
    Smsgs_cmdIds_configRsp = 2;
    /*! Tracking request message, sent from the the collector to the sensor */
    Smsgs_cmdIds_trackingReq = 3;
    /*! Tracking response message, sent from the sensor to the collector */
    Smsgs_cmdIds_trackingRsp = 4;
    /*! Sensor data message, sent from the sensor to the collector */
    Smsgs_cmdIds_sensorData = 5;
    /* Toggle LED message, sent from the collector to the sensor */
    Smsgs_cmdIds_toggleLedReq = 6;
    /* Toggle LED response msg, sent from the sensor to the collector */
    Smsgs_cmdIds_toggleLedRsp = 7; 
} 

/*!
  Frame Control field states what data fields are included in reported
  sensor data, each value is a bit mask value so that they can be combined
  (OR'd together) in a control field.
  When sent over-the-air in a message this field is 2 bytes.
*/
enum Smsgs_dataFields
{
    /*! Temperature Sensor */
    Smsgs_dataFields_tempSensor = 0x0001;
    /*! Light Sensor */
    Smsgs_dataFields_lightSensor = 0x0002;
    /*! Humidity Sensor */
    Smsgs_dataFields_humiditySensor = 0x0004;
    /*! Message Statistics */
    Smsgs_dataFields_msgStats = 0x0008;
    /*! Config Settings */
    Smsgs_dataFields_configSettings = 0x0010;
    /*! Toggle Settings - changed to 0x30 from 0x20 */
    Smsgs_dataFields_toggleSettings = 0x0030;
    /*! Pressure Sensor */
    Smsgs_dataFields_pressureSensor = 0x0020;
    /*! Motion Sensor */
    Smsgs_dataFields_motionSensor = 0x0040;
    /*! battery Sensor */
    Smsgs_dataFields_batterySensor = 0x0080;

}

/*!
  Status values for the over-the-air messages
*/
enum Smsgs_statusValues
{
    /*! Success */
    Smsgs_statusValues_success = 0;
    /*! Message was invalid and ignored */
    Smsgs_statusValues_invalid = 1;
    /*!
      Config message was received but only some frame control fields
      can be sent or the reportingInterval or pollingInterval fail
      range checks.
    */
    Smsgs_statusValues_partialSuccess = 2;
}

/******************************************************************************
 Structures - Building blocks for the over-the-air sensor messages
*****************************************************************************/

/*!
  Configuration Request message: sent from controller to the sensor.
*/
message Smsgs_configReqMsg
{
    /*! Command ID - 1 byte */
    required Smsgs_cmdIds cmdId = 1;
    /*! Frame Control field - bit mask of Smsgs_dataFields */
    required uint32 frameControl = 2;
    /*! Reporting Interval */
    required uint32 reportingInterval = 3;
    /*! Polling Interval */
    required uint32 pollingInterval = 4;
}

/*!
  Configuration Response message: sent from the sensor to the collector
  in response to the Configuration Request message.
*/
message Smsgs_configRspMsg
{
    /*! Command ID - 1 byte */
    required Smsgs_cmdIds cmdId = 1;
    /*! Response Status - 1 byte */
    required Smsgs_statusValues status = 2;
    /*! Frame Control field - bit mask of Smsgs_dataFields */
    required uint32 frameControl = 3;
    /*! Reporting Interval */
    required uint32 treportingInterval = 4;
    /*! Polling Interval */
    required uint32 pollingInterval = 5;
}

/*!
  Tracking Request message: sent from controller to the sensor.
*/
message Smsgs_trackingReqMsg
{
    /*! Command ID */
    required Smsgs_cmdIds cmdId = 1;
}

/*!
  Tracking Response message: sent from the sensor to the collector
  in response to the Tracking Request message.
*/
message Smsgs_trackingRspMsg
{
    /*! Command ID */
    required Smsgs_cmdIds cmdId = 1;
} 

/*!
 Toggle Request message: sent from controller to the sensor.
 */
message Smsgs_toggleLedReqMsg 
{
    /*! Command ID - 1 byte */
    required Smsgs_cmdIds cmdId = 1;
} 

/*!
 Toggle Response message: sent from sensor to the controller.
 */
message Smsgs_toggleLedRspMsg
{
    /*! Command ID - 1 byte */
    required Smsgs_cmdIds cmdId = 1;
    /*! Response Status - 2 bytes */
    required uint32 ledState = 2;
} 


/*!
  Temp Sensor Field
*/
message Smsgs_tempSensorField
{
    /*!
      Ambience Chip Temperature - each value represents a 0.01 C
      degree, so a value of 2475 represents 24.75 C.
    */
    required uint32 ambienceTemp = 1;
    /*!
      Object Temperature - each value represents a 0.01 C
      degree, so a value of 2475 represents 24.75 C.
    */
    required uint32 objectTemp = 2;
}

/*!
  Light Sensor Field
*/
message Smsgs_lightSensorField
{
    /*! Raw Sensor Data read out of the OPT2001 light sensor */
    required uint32 rawData = 1;
}

/*!
  Humidity Sensor Field
*/
message Smsgs_humiditySensorField
{
    /*! Raw Temp Sensor Data from the TI HCD1000 humidity sensor. */
    required uint32 temp = 1;
    /*! Raw Humidity Sensor Data from the TI HCD1000 humidity sensor. */
    required uint32 humidity = 2;
}

/*!
 Pressure Sensor Field
 */
message Smsgs_pressureSensorField
{
  /*! Temperature value read out of the BMP280 pressure sensor */
  required uint32 tempValue =1;

  /*! Pressure value read out of the BMP280 pressure sensor */
    required uint32 pressureValue=2 ;
} 

/*! Motion Sensor Field */
message Smsgs_motionSensorField
{
  /* true if motion detected, false if no motion */
  required bool isMotion=1;
}

/*! Battery Sensor Field */
message Smsgs_batterySensorField
{
  /* battery voltage in mv */
  required uint32 voltageValue=1;
}

/*!
  Message Statistics Field
*/
message Smsgs_msgStatsField
{
    /*! total number of join attempts (associate request sent) */
    required uint32 joinAttempts = 1;
    /*! total number of join attempts failed */
    required uint32 joinFails = 2;
    /*! total number of sensor data messages attempted. */
    required uint32 msgsAttempted = 3;
    /*! total number of sensor data messages sent. */
    required uint32 msgsSent = 4;
    /*! total number of tracking requests received */
    required uint32 trackingRequests = 5;
    /*! total number of tracking response attempted */
    required uint32 trackingResponseAttempts = 6;
    /*! total number of tracking response success */
    required uint32 trackingResponseSent = 7;
    /*!
      Total number of Channel Access Failures.  These are indicated in MAC data
      confirms for MAC data requests.
    */
    required uint32 channelAccessFailures = 8;
    /*!
      Total number of MAC ACK failures. These are indicated in MAC data
      confirms for MAC data requests.
    */
    required uint32 macAckFailures = 9;
    /*!
      Total number of MAC data request failures, other than channel access
      failure or MAC ACK failures.
    */
    required uint32 otherDataRequestFailures = 10;
    /*! Total number of sync loss failures received for sleepy devices. */
    required uint32 syncLossIndications = 11;
}

/*!
  Message Statistics Field
*/
message Smsgs_configSettingsField
{
    /*!
      Reporting Interval - in millseconds, how often to report, 0
      means reporting is off
    */
    required uint32 reportingInterval = 1;
    /*!
      Polling Interval - in millseconds (32 bits) - If the sensor device is
      a sleep device, this states how often the device polls its parent for
      data. This field is 0 if the device doesn't sleep.
    */
    required uint32 pollingInterval = 2;
}

/*!
  Sensor Data message: sent from the sensor to the collector
*/
message Smsgs_sensorMsg
{
    /*! Command ID */
    required Smsgs_cmdIds cmdId = 1;
    /*! Dummy value so we have a fixed item */
    required uint32 frameControl = 2; /*uint16_t*/
    /*!
      Temp Sensor field 
    */
    optional Smsgs_tempSensorField tempSensor = 3;
    /*!
      Light Sensor field
      is set in frameControl.
    */
    optional Smsgs_lightSensorField lightSensor = 4;
    /*!
      Humidity Sensor field
    */
    optional Smsgs_humiditySensorField humiditySensor = 5;
    /*!
      Message Statistics field
    */
    optional Smsgs_msgStatsField msgStats = 6;
    /*!
      Configuration Settings field
    */
    optional Smsgs_configSettingsField configSettings = 7;
    /*! 
      Pressure Sensor Field
    */
    optional Smsgs_pressureSensorField pressureSensor = 8;
    /*!
      Motion Sensor Field 
    */
    optional Smsgs_motionSensorField motionSensor = 9;
    /*!
      Battery sensor field 
    */
    optional Smsgs_batterySensorField batterySensor = 10;

}

//  ========================================
//  Texas Instruments Micro Controller Style
//  ========================================
//  Local Variables:
//  mode: protobuf
//  tab-width: 4
//  c-basic-offset: 4
//  indent-tabs-mode: nil
//  End:
//  vim:set  tabstop=4 shiftwidth=4 expandtab=true
